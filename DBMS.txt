#Practical no. 3 

Microsoft Windows [Version 10.0.22631.4317]
(c) Microsoft Corporation. All rights reserved.

C:\Users\Aditya>mongosh
Current Mongosh Log ID: 670aada743cd773e4e86b01c
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.3.2
Using MongoDB:          8.0.1
Using Mongosh:          2.3.2

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-10-12T22:00:19.022+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> use friendsDB;
switched to db friendsDB
friendsDB> db.createCollection("friends");
{ ok: 1 }
friendsDB> db.friends.insertMany([
...    { name: "Aditya Doke", age: 22, city: "Pune" },
...    { name: "Yash Agarwal", age: 21, city: "Mumbai" },
...    { name: "Tejas Khandre", age: 22, city: "Pune" },
...    { name: "Rohit Awatade", age: 21, city: "Nagpur" },
...    { name: "Nikhil Harde", age: 23, city: "Mumbai" },
...    { name: "Chaitanya Kamble", age: 22, city: "Pune" },
...    {name: "Piyush Chavan", age: 22, city: "Pune" }
... ]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('670aadf643cd773e4e86b01d'),
    '1': ObjectId('670aadf643cd773e4e86b01e'),
    '2': ObjectId('670aadf643cd773e4e86b01f'),
    '3': ObjectId('670aadf643cd773e4e86b020'),
    '4': ObjectId('670aadf643cd773e4e86b021'),
    '5': ObjectId('670aadf643cd773e4e86b022'),
    '6': ObjectId('670aadf643cd773e4e86b023')
  }
}



//CRUD Operations 


//1) Read

friendsDB> db.friends.find();
[
  {
    _id: ObjectId('670aadf643cd773e4e86b01d'),
    name: 'Aditya Doke',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b01e'),
    name: 'Yash Agarwal',
    age: 21,
    city: 'Mumbai'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b01f'),
    name: 'Tejas Khandre',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b020'),
    name: 'Rohit Awatade',
    age: 21,
    city: 'Nagpur'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b021'),
    name: 'Nikhil Harde',
    age: 23,
    city: 'Mumbai'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b022'),
    name: 'Chaitanya Kamble',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b023'),
    name: 'Piyush Chavan',
    age: 22,
    city: 'Pune'
  }
]
friendsDB> db.friends.find({ city: "Pune" });
[
  {
    _id: ObjectId('670aadf643cd773e4e86b01d'),
    name: 'Aditya Doke',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b01f'),
    name: 'Tejas Khandre',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b022'),
    name: 'Chaitanya Kamble',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b023'),
    name: 'Piyush Chavan',
    age: 22,
    city: 'Pune'
  }
]


//2) Update


friendsDB> db.friends.updateOne(
...    { name: "Yash Agarwal" },
...    { $set: { age: 22 } }
... );
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}


//3) Delete


friendsDB> db.friends.deleteOne({ name: "Nikhil Harde" });
{ acknowledged: true, deletedCount: 1 }
friendsDB> db.friends.save({
... _id: ObjectId("670aadf643cd773e4e86b01d"),
... name: "Aditya Doke",
... age: 22,
... city: 'Pune'
... });




// SAVE METHOD (I have used updateOne() instead of save() because save() has been deprecated in latest versions of Mongodb)

studentsDB> db.friends.updateOne(
...   { _id: ObjectId("670aadf643cd773e4e86b020") },  // Ensure this is a valid ObjectId
...   {
...     $set: {
...       name: "Rohit Awatade",
...       age: 22,
...       city: "Nagpur"
...     }
...   },
...   { upsert: true }  // Insert the document if it doesn't exist
... );
{
  acknowledged: true,
  insertedId: ObjectId('670aadf643cd773e4e86b020'),
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 1
}



//LOGICAL OPERATORS

// 1) $or operator


friendsDB> db.friends.find({
...    $or: [
...       { city: "Pune" },
...       { city: "Mumbai" }
...    ]
... });
[
  {
    _id: ObjectId('670aadf643cd773e4e86b01d'),
    name: 'Aditya Doke',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b01e'),
    name: 'Yash Agarwal',
    age: 22,
    city: 'Mumbai'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b01f'),
    name: 'Tejas Khandre',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b022'),
    name: 'Chaitanya Kamble',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b023'),
    name: 'Piyush Chavan',
    age: 22,
    city: 'Pune'
  }
]


//2) $and operator


friendsDB> db.friends.find({
...    $and: [
...       { city: "Pune" },
...       { age: { $gt: 22 } }
...    ]
... });



// 3) $not Operator



friendsDB> db.friends.find({ city: { $not: { $eq: "Pune" } } });
[
  {
    _id: ObjectId('670aadf643cd773e4e86b01e'),
    name: 'Yash Agarwal',
    age: 22,
    city: 'Mumbai'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b020'),
    name: 'Rohit Awatade',
    age: 21,
    city: 'Nagpur'
  }
]


// Check the Final Data


friendsDB> db.friends.find();
[
  {
    _id: ObjectId('670aadf643cd773e4e86b01d'),
    name: 'Aditya Doke',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b01e'),
    name: 'Yash Agarwal',
    age: 22,
    city: 'Mumbai'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b01f'),
    name: 'Tejas Khandre',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b020'),
    name: 'Rohit Awatade',
    age: 21,
    city: 'Nagpur'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b022'),
    name: 'Chaitanya Kamble',
    age: 22,
    city: 'Pune'
  },
  {
    _id: ObjectId('670aadf643cd773e4e86b023'),
    name: 'Piyush Chavan',
    age: 22,
    city: 'Pune'
  }
]
friendsDB>

















#Practical no. 4 



CREATE OR REPLACE PROCEDURE CalculateFine (
    p_rollno IN NUMBER,
    p_bookname IN VARCHAR2
) AS
    v_date_of_issue DATE;
    v_status CHAR(1);
    v_days NUMBER;
    v_fine_amount NUMBER := 0;
BEGIN
    -- Fetch the details of the borrower
    SELECT Date_of_Issue, Status
    INTO v_date_of_issue, v_status
    FROM Borrower
    WHERE Roll_no = p_rollno AND Name_of_Book = p_bookname;  -- Adjusted for case sensitivity

    -- Check if the book is still issued
    IF v_status = 'I' THEN
        -- Calculate the number of days since the book was issued
        v_days := TRUNC(SYSDATE) - TRUNC(v_date_of_issue);

        -- Determine the fine amount based on the number of days
        IF v_days > 30 THEN
            v_fine_amount := (v_days - 30) * 50 + 15 * 5; -- First 30 days fine at Rs. 5, then Rs. 50/day
        ELSIF v_days > 15 THEN
            v_fine_amount := (v_days - 15) * 5; -- Rs. 5/day after 15 days
        END IF;

        -- If there's a fine, insert it into the Fine table
        IF v_fine_amount > 0 THEN
            INSERT INTO Fine (Roll_no, FineDate, Amt)  -- Ensure column names match
            VALUES (p_rollno, SYSDATE, v_fine_amount);
        END IF;

        -- Update the status of the book to 'Returned'
        UPDATE Borrower
        SET Status = 'R'
        WHERE Roll_no = p_rollno AND Name_of_Book = p_bookname;  -- Adjusted for case sensitivity

        COMMIT;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Book already returned.');
    END IF;
END;
/



























#Practical no. 5


DECLARE
    -- Define a parameterized cursor to fetch records from N_Roll_Call
    CURSOR roll_call_cur IS
        SELECT Roll_no, Name, Class FROM N_Roll_Call;

    -- Define variables to hold the cursor data
    v_rollno N_Roll_Call.Roll_no%TYPE;
    v_name N_Roll_Call.Name%TYPE;
    v_class N_Roll_Call.Class%TYPE;

    -- Variable to check if record exists
    v_exists NUMBER;
BEGIN
    -- Open the cursor and loop through all records
    FOR rec IN roll_call_cur LOOP
        -- Check if the current record from N_Roll_Call exists in O_Roll_Call
        SELECT COUNT(*)
        INTO v_exists
        FROM O_Roll_Call
        WHERE Roll_no = rec.Roll_no;

        -- If the record doesn't exist, insert it into O_Roll_Call
        IF v_exists = 0 THEN
            INSERT INTO O_Roll_Call (Roll_no, Name, Class)
            VALUES (rec.Roll_no, rec.Name, rec.Class);
            DBMS_OUTPUT.PUT_LINE('Inserted: ' || rec.Name || ' into O_Roll_Call');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Skipped: ' || rec.Name || ' (already exists in O_Roll_Call)');
        END IF;
    END LOOP;

    -- Commit the transaction
    COMMIT;
END;
/
